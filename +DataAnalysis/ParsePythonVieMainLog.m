classdef ParsePythonVieMainLog
    %PARSE_PYTHONVIE_MAIN_LOG Parses log files from PythonVIE
    %   This class file is dedicated to parsing a single log file type.  In
    %   this case, the log file is that generated by the main scenario
    %   withing the PythonVIE (i.e. run_www.py).
    %   This log files onctains the following message types:
    %
    %   Limb Controller (LC) Status (i.e. Heartbeats):
    %         nfu_state
    %         nfu_ms_per_CMDDOM
    %         nfu_ms_per_ACTUATEMPL
    %         lmc_software_state
    %         lc_software_state
    %         bus_voltage
    %       Note, order is NOT guarenteed as in example below
    %       2016-02-11 13:50:54,569 [NfuUdpRcv   ] [INFO ]  {'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8), 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 18.824909}
    %       2016-02-11 12:21:57,506 [NfuUdpRcv   ] [INFO ]  {'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 22.489866, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8)}
    %
    %   MYO Status Data (Raw EMG is logged in a seperate file)
    %
    %
    % Revisions:
    %   Armiger 12/2/2017: Created
    properties
        filePath = ''
        fileName = ''
        numLines = 0
        textLines
        isRead  % Binary label of lines read and processed
        unreadLines
        userMsg
        heartbeatMsg
        torqueMsg
        jointCmdMsg
        tempMsg
        dcellMsg
        firstDatetime
        lastDatetime
        elapsedTime
        maxVoltage
        minVoltage
        
    end
    methods
        function obj = ParsePythonVieMainLog(fullFilename)
            % Get filename and parse file
            
            if nargin < 1
                % Raise file selection dialog if no files provided
                
                % [obj.fileName, obj.filePath] = uigetfile('*.log','Select one or more log files','Multiselect','off');
                
                obj.filePath = '';
                s = dir('*.log');
                obj.fileName = s(end).name;
            else
                [p,f,e] = fileparts(fullFilename);
                obj.filePath = p;
                obj.fileName = [f e];
            end
            
            %%%%%%%%%%%%%%%%%
            % read the file
            %%%%%%%%%%%%%%%%%
            filetext = fileread(fullfile(obj.filePath,obj.fileName));
            
            % Break file into lines
            obj.textLines = strsplit(filetext, '\n');
            obj.numLines = length(obj.textLines);
            obj.isRead = false(obj.numLines,1);
            fprintf('\nRead file: "%s" \t Found %d lines\n',obj.fileName,obj.numLines);

            %%%%%%%%%%%%%%%%%
            % Parse User Messages:
            %%%%%%%%%%%%%%%%%
            logMsgId = contains(obj.textLines,'User inserted log message');
            obj.isRead(logMsgId) = true;
            if any(logMsgId)
                logLines = obj.textLines(logMsgId)';
                
                obj.userMsg.msgTxt = extractAfter(logLines,'User inserted log message: ')';
                for i = 1:length(logLines)
                    % convert to date number
                    obj.userMsg.timeStamp{1,i} = datetime(logLines{i}(1:23),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                end 
                disp(obj.userMsg)
            end

            
            %%%%%%%%%%%%%%%%%
            % Parse CPU Temp Messages:
            %%%%%%%%%%%%%%%%%
            tempMsgId = contains(obj.textLines,'CPU');
            obj.isRead(tempMsgId) = true;
            if any(tempMsgId)
                tempLines = obj.textLines(tempMsgId)';
                obj.tempMsg.time = datetime(extractBefore(tempLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.tempMsg.value = str2double(extractAfter(tempLines,'CPU Temp: '));
            end

            
            %%%%%%%%%%%%%%%%%
            % Parse DCELL Temp Messages:
            %%%%%%%%%%%%%%%%%
            dcellMsgId = contains(obj.textLines,'DCELL');
            obj.isRead(dcellMsgId) = true;
            if any(dcellMsgId)
                dcellLines = obj.textLines(dcellMsgId)';
                obj.dcellMsg.time = datetime(extractBefore(dcellLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.dcellMsg.value = str2double(extractAfter(dcellLines,'DCELL: '));
            end
            
            %%%%%%%%%%%%%%%%%
            % Parse Joint Torque:
            %%%%%%%%%%%%%%%%%
            torqueMsgId = contains(obj.textLines,'Torque:');
            obj.isRead(torqueMsgId) = true;
            if any(torqueMsgId)
                torqueLines = obj.textLines(torqueMsgId)';
                obj.torqueMsg.time = datetime(extractBefore(torqueLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.torqueMsg.value = cellfun(@str2num,extractAfter(torqueLines,'Torque: '),'UniformOutput',false);
            end

            %%%%%%%%%%%%%%%%%
            % Parse Joint Command:
            %%%%%%%%%%%%%%%%%
            jointCmdMsgId = contains(obj.textLines,'CmdAngles:');
            obj.isRead(jointCmdMsgId) = true;
            if any(jointCmdMsgId)
                jointCmdLines = obj.textLines(jointCmdMsgId)';
                obj.jointCmdMsg.time = datetime(extractBefore(jointCmdLines,24),'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');
                obj.jointCmdMsg.value = cellfun(@str2num,extractAfter(jointCmdLines,'CmdAngles: '),'UniformOutput',false);
            end

            %%%%%%%%%%%%%%%%%%
            % Parse Hearbeat lines
            % example:
            % {'2016-02-11 13:50:54,569 [NfuUdpRcv   ] [INFO ]  {'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8), 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 18.824909}'}
            % {'2016-02-11 12:21:57,506 [NfuUdpRcv   ] [INFO ]  {'nfu_ms_per_CMDDOM': 0.0, 'nfu_ms_per_ACTUATEMPL': 0.0, 'nfu_state': 'BOOTSTATE_COMMAND_REQ', 'lc_software_state': 'SWSTATE_NOS_DIAGNOSTICS', 'bus_voltage': 22.489866, 'lmc_software_state': array([15, 15, 15,  4,  4, 15,  4], dtype=uint8)}'}
            
            %%%%%%%%%%%%%%%%%%
            
            % Find NFU Heartbeat
            statusId = contains(obj.textLines,'bus_voltage');
            obj.isRead(statusId) = true;
            statusLines = obj.textLines(statusId)';
            
            % extract date string
            C = cellfun(@(x)regexp(x,'.*(?= [NfuUdp)','match'),statusLines);
            % convert to date number
            obj.heartbeatMsg.timeStamp = datetime(C,'InputFormat','yyyy-MM-dd HH:mm:ss,SSS');

            % add date stats
            obj.firstDatetime = min(obj.heartbeatMsg.timeStamp);
            obj.lastDatetime = max(obj.heartbeatMsg.timeStamp);
            obj.elapsedTime = duration(obj.lastDatetime - obj.firstDatetime);
            
            % search after "bus_voltage': " for digits.digits
            C = cellfun(@(x)regexp(x,'(?<=bus_voltage'':\s)\d+.\d+','match'),statusLines);
            obj.heartbeatMsg.busVoltage = str2double(C);
            assert(~any(isnan(obj.heartbeatMsg.busVoltage)),'Error parsing bus_voltage, check regexp')
            
            % add voltage stats
            obj.maxVoltage = max(obj.heartbeatMsg.busVoltage);
            obj.minVoltage = min(obj.heartbeatMsg.busVoltage);

            
            %%
            % lc_software_state': '        ', 'nfu_ms_per_CMDDOM
            C = cellfun(@(x)regexp(x,'(?<=lc_software_state'':\s'')\w+','match'),statusLines);
            lc_software_state = unique(C);
            
            C = cellfun(@(x)regexp(x,'(?<=nfu_ms_per_CMDDOM'':\s)\d+.\d+','match'),statusLines);
            obj.heartbeatMsg.nfu_ms_per_CMDDOM = str2double(C);
            
            C = cellfun(@(x)regexp(x,'(?<=nfu_state'':\s'')\w+','match'),statusLines);
            nfu_state = unique(C);
            
            C = cellfun(@(x)regexp(x,'(?<=nfu_ms_per_ACTUATEMPL'':\s)\d+.\d+','match'),statusLines);
            obj.heartbeatMsg.nfu_ms_per_ACTUATEMPL = str2double(C);

            % ignore messages:
            obj.isRead(contains(obj.textLines,'shutdown_voltage')) = true;           
            
            %% Print Remaining Lines
            obj.unreadLines = obj.textLines(~obj.isRead)';
            
            
        end        
    end
end

